<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;

class GenerateModelTypes extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = "inertiakit:model-types";

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = "Generate TypeScript interfaces from your Eloquent models";

    /**
     * Execute the console command.
     *
     * @return void
     */
    public function handle()
    {
        // Get models from config or auto-discover
        $models = config("inertiakit.models", []);
        if (empty($models)) {
            $modelFiles = File::allFiles(app_path("Models"));
            foreach ($modelFiles as $file) {
                if ($file->getExtension() === "php") {
                    $models[] =
                        "App\\Models\\" .
                        pathinfo($file->getFilename(), PATHINFO_FILENAME);
                }
            }
        }

        if (empty($models)) {
            return $this->error("No models found in app/Models");
        }

        $output =
            "// AUTO-GENERATED by inertiakit:model-types â€” do not edit\n\n";

        foreach ($models as $modelClass) {
            if (!class_exists($modelClass)) {
                $this->warn("Skipping {$modelClass}: class not found");
                continue;
            }

            $model = new $modelClass();
            $table = $model->getTable();
            $hidden = $model->getHidden();
            $casts = $model->getCasts();

            // Introspect columns
            $connection = Schema::getConnection();
            $driver = $connection->getDriverName();
            $columns = [];

            if (method_exists($connection, "getDoctrineSchemaManager")) {
                $schemaManager = $connection->getDoctrineSchemaManager();
                $doctrineCols = $schemaManager->listTableColumns($table);
                foreach ($doctrineCols as $col) {
                    $columns[] = [
                        "name" => $col->getName(),
                        "type" => $col->getType()->getName(),
                    ];
                }
            } elseif ($driver === "sqlite") {
                $rows = DB::select("PRAGMA table_info('{$table}')");
                foreach ($rows as $row) {
                    $columns[] = [
                        "name" => $row->name,
                        "type" => Str::lower($row->type),
                    ];
                }
            } else {
                $this->error(
                    "Cannot introspect table '{$table}' on driver '{$driver}'"
                );
                continue;
            }

            $interfaceName = class_basename($modelClass);
            $output .= "export interface {$interfaceName} {\n";

            foreach ($columns as $col) {
                $name = $col["name"];
                if (in_array($name, $hidden, true)) {
                    continue;
                }

                $rawType = $casts[$name] ?? $col["type"];
                $tsType = match (Str::lower($rawType)) {
                    "int",
                    "integer",
                    "bigint",
                    "smallint",
                    "float",
                    "decimal",
                    "double"
                        => "number",
                    "bool", "boolean" => "boolean",
                    "json", "array", "simplearray", "jsonarray" => "any[]",
                    "datetime",
                    "datetimetz",
                    "date",
                    "timestamp",
                    "timestampimmutable"
                        => "string",
                    default => "string",
                };

                $output .= "  {$name}: {$tsType};\n";
            }

            $output .= "}\n\n";
        }

        $path = base_path(
            config("inertiakit.types_output", "resources/js/types/models.d.ts")
        );
        File::ensureDirectoryExists(dirname($path));
        File::put($path, $output);

        $this->info("TypeScript model interfaces written to {$path}");
    }
}
